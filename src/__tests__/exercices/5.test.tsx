import { render, screen } from '@testing-library/react';
import { describe, test, vi, expect, afterEach } from 'vitest';
import {Geolocation} from '../../components/geolocation/Geolocation';

export const mockLocation = (
  hasAccepted = false, 
  {
    latitude = 100,
    longitude = 100,
  }: {
  latitude?: number;
  longitude?: number;
} = {}) => {
  // ü¶Å Cr√©er un fake objet `navigator`
  const fakeNavigator = {
    // Avec une propri√©t√© `geolocation`
    geolocation: {
      // Qui contient une m√©thode `getCurrentPosition`
      // Qui prend en param√®tre une fonction `success`
      // Qui prend en param√®tre un objet `coords`
      getCurrentPosition: vi.fn((success, error) => {
        hasAccepted 
        ? success({
          coords: {
            latitude,
            longitude,
          }
        })
        : error('An error occured');
      }),
    }
  };
  // ü¶Å Stub la propri√©t√© `navigator` de l'objet global
  vi.stubGlobal('navigator', fakeNavigator);
};

describe('Geolocation', () => {
  test('geolocation show the latitude and longitude', () => {
    // ü¶Å Cr√©er un objet `coords` avec les propri√©t√©s `latitude` et `longitude`
    const coords = {
      latitude: 200,
      longitude: 300,
    };
    // ü¶Å Appeler la fonction `mockLocation` avec l'objet `coords` en param√®tre
    mockLocation(true, coords);
    render(<Geolocation />);
    // ü¶Å V√©rifier que le texte `Latitude: ${coords.latitude}` est pr√©sent ainsi que longitude
    expect(screen.getByText(`Latitude: ${coords.latitude}`)).toBeInTheDocument();
    expect(screen.getByText(`Longitude: ${coords.longitude}`)).toBeInTheDocument();
  });
  test('geolocation is user blocked', () => {
    // ü¶Å Appeler la fonction `mockLocation` avec l'objet `coords` en param√®tre
    mockLocation();
    render(<Geolocation />);
    expect(screen.getByText('Geolocation is not supported')).toBeInTheDocument();
  });
  afterEach(() => {
    mockLocation();
  });
});
